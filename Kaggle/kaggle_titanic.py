# -*- coding: utf-8 -*-
"""Kaggle_Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FObgIQcMt_jwvpknJMtVnD7UQKCqzQdw
"""

import warnings
warnings.filterwarnings('ignore')
warnings.filterwarnings('ignore', category=DeprecationWarning)

import pandas as pd
pd.options.display.max_columns = 100

from matplotlib import pyplot as plt
import numpy as np

import seaborn as sns

import pylab as plot

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

"""**Importing data into Google Colab**

First we need to load the data to Google colab.

The above code allows you to load any data into google colab.
"""

data = pd.read_csv('./train.csv')
print data.shape
data.head()

"""**Importing data (into python environment)**

This step involves importing data from the Google colab to the python script using the library called **Pandas**. Thus making it easier to work with. 

There are many options and features that pandas offer that allows us to get a better idea of the data.
"""

data.describe()

"""**Data Description**

The previous Code cell describe the data by pointing out each attribute and the import insights from the data like showing the number of entries for each attribute .

The mean will give the mean of the values of that attribute.
Similarly standard deviation and minimum ,etc for each attribute is listed out to understand the data in a better way.
"""

print("The total number of NaN fields "+str(data['Age'].isnull().sum().sum()))
#data.info()

median_value=float(data['Age'].median())
data['Age']=data['Age'].fillna(median_value)
print("The total number of Nan fields after filling with median "+str(data['Age'].isnull().sum().sum()))

"""**NA Attrocities**

One of the challeges is selecting the data to replace NA in the training data which we are giving as input to the algorithm.

There are many ways of dealing with NaN value
1) replace with something
2) remove the entire row

As we can see in the previous cell output if we are having almost 200 NaN age, so if we remove the row we will be left out with only 600 entries and if we start removing for each of the attributes then there won't be much data left for training.

So it is better to replace it with median or mean of the corresponding column.
"""

data['Died'] = 1 - data['Survived']
data.groupby('Sex').agg('sum')[['Survived', 'Died']].plot(kind='bar', figsize=(25, 7),
                                                          stacked=True, colors=['g', 'r']);